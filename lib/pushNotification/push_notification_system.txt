import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:gamematch/global.dart';
import 'package:gamematch/tabScreens/user_detailsScreen.dart';
import 'package:get/get.dart';


class PushNotificationSystem{
  FirebaseMessaging messaging = FirebaseMessaging.instance;

  Future whenNotificationReceived(BuildContext context) async{
    //terminated
    FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? RemoteMessage){
      if(RemoteMessage != null){
        openAppshowAndNotificationData(RemoteMessage.data["userID"], RemoteMessage.data["senderID"], context);
      }
    });

    //Foreground
    FirebaseMessaging.onMessage.listen((RemoteMessage? RemoteMessage){
      if(RemoteMessage != null){
        openAppshowAndNotificationData(RemoteMessage.data["userID"], RemoteMessage.data["senderID"], context);
      }
    });

    //Background
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage? RemoteMessage){
      if(RemoteMessage != null){
        openAppshowAndNotificationData(RemoteMessage.data["userID"], RemoteMessage.data["senderID"], context);
      }
    });

  }
  openAppshowAndNotificationData(reciverID, senderID, context) async{
    await FirebaseFirestore.instance.collection("users").doc(senderID).get().then((snapshot){
      String imageProfile = snapshot.data()!["imageProfile"].toString();
      String name = snapshot.data()!["name"].toString();
      String age = snapshot.data()!["age"].toString();
      String country = snapshot.data()!["country"].toString();

      showDialog(context: context, builder: (context){
        return NotificationDialogBox(senderID, imageProfile, name, age, country, context);
      });
    });
  }

  NotificationDialogBox(senderID, imageProfile, name, age, country, context){
    return Dialog(
      child: GridTile(
        child: Padding(
          padding: const EdgeInsets.all(2.0),
          child: SizedBox(
            height: 300,
            child: DecoratedBox(
              decoration: BoxDecoration(
                image: DecorationImage(
                  image: NetworkImage(imageProfile),
                  fit: BoxFit.cover,
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Center(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [

                      Text(name + " - " + age.toString() + " - " + country,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),

                      const SizedBox(height: 8,),

                      const Spacer(),

                      Row(
                        children: [
                          Center(
                            child: ElevatedButton(
                              onPressed: (){
                                Get.back();

                                Get.to(UserDetailsScreen(userID: senderID,));
                              },
                              style: ElevatedButton.styleFrom(backgroundColor: Colors.green,),
                              child: const Text(
                                "View Profile"
                              ),
                            ),
                          ),
                          
                          Center(
                            child: ElevatedButton(
                              onPressed: (){
                                Get.back();
                              },
                              style: ElevatedButton.styleFrom(backgroundColor: Colors.redAccent),
                              child: const Text(
                                "close"
                              ),
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Future generateDeviceRegistrationToken() async{
    String? deviceToken = await messaging.getToken();

    await FirebaseFirestore.instance.collection("users").doc(currentUserID).update({
      "userDataToken": deviceToken,
    });
  }
}